#!/usr/bin/env python

import os
import sys
import traceback
from surprise import Dataset, Reader, SVD, dump
from surprise.model_selection import GridSearchCV

# Paths where SageMaker mounts data in our container
prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model', 'recommender_system')

# This algorithm has two channels: training (mandatory) and testing (optional).
# When input method is file mode, the input files are copied to the directory
# specified here.
channel_name_train = 'train'
training_path = os.path.join(input_path, channel_name_train)
""" channel_name_test = 'test'
test_path = os.path.join(input_path, channel_name_test)
test_flag = False
 """

ratings_path = os.path.join(training_path, 'Ratings.csv')

def train():
    print('Training job started')
    try:
        # Process ratings with Surprise Scikit
        reader = Reader(line_format='user item rating', sep=',', rating_scale = (1.0,5.0), skip_lines=1)
        ratings = Dataset.load_from_file(ratings_path, reader=reader)
        trainset = ratings.build_full_trainset()

        # Find the best hyperparameters for an SVD model via grid search cross-validation
        param_grid = {
            'n_factors': [10, 100, 500],
            'n_epochs': [5, 20, 50], 
            'lr_all': [0.001, 0.005, 0.02],
            'reg_all': [0.005, 0.02, 0.1]}

        gs_model = GridSearchCV(
            algo_class = SVD,
            param_grid = param_grid,
            n_jobs = -1,
            joblib_verbose = 5)

        gs_model.fit(ratings)

        #Â Train the SVD model with the parameters that minimise the root mean squared error
        print(f"Best SVD parameters: {gs_model.best_params}")
        print(f"Test RMSE = {gs_model.cv_results['mean_test_rmse'][0].round(3)}")
        best_SVD = gs_model.best_estimator['rmse']
        best_SVD.fit(trainset)

        # Save model
        print(f"Saving model in {model_path} ...")
        dump.dump(model_path, algo=best_SVD, predictions=None)
        print("Training complete.")

    except Exception as e:
        # Write out an error file. This will be returned as the reason for
        # failure in the DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
